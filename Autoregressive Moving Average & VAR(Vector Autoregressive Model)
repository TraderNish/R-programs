
## GARCH modeling with the rugarch package

## AR models can be thought of as linear regressions of the current value of the time series against previous values. 

## MA models are, similarly, linear regressions of the current value of the time series against current and previous residuals.

library(WDI)

gdp = WDI(country=c("US", "CA", "GB", "DE", "CN", "JP", "SG", "IL"),indicator=c("NY.GDP.PCAP.CD", "NY.GDP.MKTP.CD"),start=1960, end=2011)

names(gdp) <- c("iso2c", "Country", "Year", "PerCapGDP", "GDP")

require(ggplot2)
require(scales)

us <- gdp$PerCapGDP[gdp$Country == "United States"]
us
us <- ts(us, start = min(gdp$Year), end = max(gdp$Year))
plot(us, ylab = "Per Capita GDP", xlab = "Year")

acf(us)
pacf(us)

## Figuring out the correct number of diffs can be a tiresome process. Fortunately, the forecast package has a number of functions to make working with time series data easier, including determining the optimal number of diffs. 

require(forecast)
ndiffs(x = us)

plot(diff(us, 2))

## While R offers individual ar and ma functions, a better option is the arima function, which can fit both AR and MA models and the combined ARMA model. It is even more robust in that it can diff the series and fit seasonal effects. Traditionally, the right order of each component of the model is determined by analyzing the ACF and PACF. This can be highly subjective, so fortunately forecast contains auto.arima, which will figure out the best specification.

usBest <- auto.arima(x = us)
usBest

## If this model is a good fit, then the residuals should resemble white noise. Figure shows the ACF and PACF of the residuals for the ideal model. They resemble the pattern for white noise, confirming our model selection.

acf(usBest$residuals)
pacf(usBest$residuals)

coef(usBest)

## predict 5 years into the future and include the standard error
predict(usBest, n.ahead = 5, se.fit = TRUE)

## Visualizing this is easy enough but using the forecast function makes it even easier
theForecast <- forecast(object = usBest, h = 5)
plot(theForecast)

## VAR
require(reshape2)

gdpCast <- dcast(Year ~ Country, data=gdp[, c("Country", "Year", "PerCapGDP")],value.var="PerCapGDP")
head(gdpCast)

## remove first 10 rows since Germany did not have
## convert to time series

gdpTS <- ts(data=gdpCast[, -1], start=min(gdpCast$Year),end=max(gdpCast$Year))

gdpTS

## build a plot and legend using base graphics
plot(gdpTS, plot.type="single", col=1:8)
legend("topleft", legend=colnames(gdpTS), ncol=2, lty=1,col=1:8, cex=.9)

## remove Germany from our data
gdpTS <- gdpTS[, which(colnames(gdpTS) != "Germany")]

## The most common way of fitting a model to multiple time series is to use a vector autoregressive (VAR) model.

numDiffs <- ndiffs(gdpTS)
numDiffs

gdpDiffed <- diff(gdpTS, differences=numDiffs)

plot(gdpDiffed, plot.type="single", col=1:7)

legend("bottomleft", legend=colnames(gdpDiffed), ncol=2, lty=1,col=1:7, cex=.9)

## Now that the data are prepared, we can fit a VAR using VAR. This essentially fits a separate regression using lm of each time series on the lags of itself and the other series. This is evidenced in the coefficient plot for the Canada and Japan models.

require(vars)
gdpVar <- VAR(gdpDiffed, lag.max = 12)
gdpVar$p

## names of each of the models
names(gdpVar$varresult)

## each model is actually an lm object
class(gdpVar$varresult$Canada)
class(gdpVar$varresult$Japan)

## each model has its own coefficients
head(coef(gdpVar$varresult$Canada))

require(coefplot)
coefplot(gdpVar$varresult$Canada)

## Predictions for this model are done just like with any other model, using the predict function.
predict(gdpVar, n.ahead = 5)



