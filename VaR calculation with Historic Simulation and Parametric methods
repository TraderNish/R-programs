# Financial Risk Forecasting Chapter 5 - Implementing risk forecasts

library("tseries")
require(zoo)
# time series library
# the two prices are downloaded separately

p1 = get.hist.quote(instrument = "msft",start = "2000-01-01", end = "2009-12-31",quote = "AdjClose")
p2 = get.hist.quote(instrument = "ibm", start = "2000-01-01", end = "2009-12-31",quote = "AdjClose")

# convert prices to returns

y1 = coredata(diff(log(p1)))
y2= coredata(diff(log(p2)))

# length adjustment

y1 = tail(y1, T-14)
y2= tail(y2,T-14)

T = length(y1)

# portfolio value

value = 1000

# combine returns in one matrix

y = cbind(y1,y2)
names(y) = c('MSFT', 'IBM')

# probability

p = 0.01

# Univariate Historic Simulation

# sort returns
ys = sort(y1)

# p % smallest

op = T*p

# VaR number

VaR1 = -ys[op]*value 


# Multivariate HS
# vector of portfolio weights

w = matrix(c(0.3,0.7)) 

# obtain portfolio returns

yp = y %*% w 

yps = sort(yp)

# VaR number

VaR2 = -yps[op]*value 

# Multivariate HS
# vector of portfolio weights

w = matrix(c(0.3,0.7)) 

# obtain portfolio returns

yp = y %*% w 

yps = sort(yp)

# VaR number

VaR2 = -yps[op]*value 

# Expected shortfall estimation

# Univariate ES in R

ES1 = -mean(ys[1:op]) * value

# VaR when returns are normally distributed

# estimate the volatility

sigma = sd(y1) 

# calculate the VaR
VaR3 = - sigma * qnorm(p) * value 

# Multivariate normal VaR

# portfolio volatility

a = t(w)
sigma = a %*% cov(y) %*% w
sigmaMain = sqrt(sigma)
VaR4 = - sigmaMain * qnorm(p)*value

# Expected shortfall under normality
ES2 = sigmaMain * dnorm(qnorm(p))/p * value

# Direct integration ES in R
VaR = - qnorm(p)
integrand = function(q){q * dnorm(q)}
ES = -sigma * integrate(integrand,-Inf,-VaR)$value/p * value

# Student-t VaR in R

library(QRMlib)

# scale the returns

scy1=(y1)*100 

# estimate the distribution parameters

res=fit.st(scy1) 

# rescale the volatility
sigma=res$par.ests[3]/100 

# extract the degrees of freedom
nu=res$par.ests[1] 

# calculates the VaR
VaR5 = -sigma * qt(df=nu,p=p) * value 

# VAR WITH TIME-DEPENDENT VOLATILITY

# Moving Average normal VaR in R

WE=20

for (t in seq(T - 5,T)){
      t1= t - WE + 1
      window = y1[t1:t]      # estimation window
      sigma = sd(window)
      VaR6 = -sigma * qnorm(p) * value
      print (VaR6)
}

VaR6

# Univariate implementation for EWMA

# weight

lambda = 0.94; 

# initial variance

s11 = var(y1[1:30]); 
s11

for (t in 2:T){
      s11 = lambda * s11 + (1 - lambda) * y1[t-1]^2
      print(s11)
}
VaR7 = -sqrt(s11) * qnorm(p) * value

VaR7

# Multivariate implementation of EWMA

# initial covariance

s = cov(y)

for (t in 2:T){
      s = lambda * s + (1-lambda) * y[t - 1,] %*% t(y[t - 1,])
}

# portfolio vol

sigma = sqrt(t(w) %*% s %*% w)

VaR8 = -sigma * qnorm(p) * value
VaR8

# GARCH normal

library(fGarch)

# parameter estimates

g = garchFit(~garch(1,1),y1,cond.dist = "norm",include.mean = FALSE,trace = FALSE) 

omega = g@fit$matcoef[1,1]
alpha = g@fit$matcoef[2,1]
beta = g@fit$matcoef[3,1]

# compute sigma2 for t+1

sigma2 = omega + alpha * y[T]^2 + beta * g@h.t[T]
VaR9 = -sqrt(sigma2) * qnorm(p) * value



