

require(PerformanceAnalytics)
require(quantstrat)
require(quantmod)

initDate="2000-01-01"
from="2010-03-26"
to="2015-03-25"

options(width=70)

symb1 = 'JPM'
symb2 = 'WFC'

getSymbols(c(symb1, symb2), from=from, to=to, adjust=TRUE)

currency('USD')
Sys.setenv(TZ="UTC")



alignSymbols <- function(symbols, env=.GlobalEnv) {
      if (length(symbols) < 2) 
            stop("Must provide at least 2 symbols")
      if (any(!is.character(symbols))) 
            stop("Symbols must be vector of character strings.")
      ff <- get(symbols[1],env=env)
      for (sym in symbols[-1]) {
            tmp.sym <- get(sym,env=env)
            ff <- merge(ff,tmp.sym,all=FALSE)
      }
      for (sym in symbols) {
            assign(sym,ff[,grep(sym,colnames(ff))],env=env)
      }
      symbols
}
alignSymbols(c(symb1,symb2))

stock(symb1, currency="USD", multiplier=1)
stock(symb2, currency="USD", multiplier=1)

colnames(JPM) = c("Open", "High", "Low", "Close", "Volume", "Adjusted")
colnames(WFC) = c("Open", "High", "Low", "Close", "Volume", "Adjusted")

#trade sizing and initial equity settings

initEq = 100000

#Initialize Portfolio, Account, and Orders

strategy.st <- portfolio.st <- account.st <- "pairs"
rm.strat(strategy.st)
initPortf(portfolio.st, c(symb1,symb2), initDate=initDate, currency='USD')
initAcct(account.st, portfolios=portfolio.st, initDate=initDate, currency='USD',
         initEq=initEq)
initOrders(portfolio.st, initDate=initDate)
strategy(strategy.st, store=TRUE)


#parameters
SD = 2
N = 50
MaxPos = 10000
lvls = 3

pair <- c(1,2,MaxPos,lvls)
names(pair) <- c(symb1,symb2,"MaxPos","lvls")
.blotter[[paste('portfolio',portfolio.st,sep='.')]]$pair <- pair


addPosLimit(portfolio=portfolio.st, timestamp=initDate, symbol=symb1, maxpos=MaxPos, longlevels=lvls, minpos=-MaxPos, shortlevels=lvls)

addPosLimit(portfolio=portfolio.st, timestamp=initDate, symbol=symb2, maxpos=MaxPos, longlevels=lvls, minpos=-MaxPos, shortlevels=lvls)

calcRatio <- function(x) { #returns the ratio of notional close prices for 2 symbols
      x1 <- get(x[1])
      x2 <- get(x[2])
      mult1 <- getInstrument(x[1])$multiplier
      mult2 <- getInstrument(x[2])$multiplier
      rat <- (mult1 * Cl(x1)) / (mult2 * Cl(x2))
      colnames(rat) <- 'Ratio'
      rat
} 
Ratio <- calcRatio(c(symb1[1],symb2[1])) #Indicator used for determining entry/exits

.blotter[[paste('portfolio',portfolio.st,sep='.')]]$HedgeRatio <- Ratio

getHedgeRatio <- function(portfolio, timestamp) {
      portf <- getPortfolio(portfolio)
      timestamp <- format(timestamp,"%Y-%m-%d %H:%M:%S") #ensures you don't get last value of next day if using intraday data and timestamp=midnight
      toDate <- paste("::", timestamp, sep="")
      Ratio <- last(portf$HedgeRatio[toDate])
      as.numeric(Ratio)
}

pairStrat <- add.indicator(strategy = strategy.st, name = "calcRatio", arguments = list(x=c(symb1,symb2)))
pairStrat <- add.indicator(strategy = strategy.st, name = "BBands", arguments = list(HLC=quote(Ratio), sd=SD, n=N, maType='SMA'))

head(applyIndicators(strategy=pairStrat,mktdata=get(symb1[1])), 25)

pairStrat <- add.signal(strategy = pairStrat, name = "sigCrossover", arguments= list(columns=c("Ratio","up"), relationship="lt"), label="cross.up")

pairStrat <- add.signal(strategy = pairStrat, name = "sigCrossover", arguments= list(columns=c("Ratio","dn"), relationship="gt"), label="cross.dn")

pairStrat <- add.signal(strategy = pairStrat, name = "sigCrossover", arguments= list(columns=c("Ratio","mavg"), relationship="lt"), label="cross.mid.fa")

pairStrat <- add.signal(strategy = pairStrat, name = "sigCrossover", arguments= list(columns=c("Ratio","mavg"), relationship="gt"), label="cross.mid.fb")

osSpreadMaxPos <- function (data, timestamp, orderqty, ordertype, orderside, portfolio, symbol, ruletype, ..., orderprice) 
{
      portf <- getPortfolio(portfolio)
      #check to make sure pair slot has the things needed for this function
      if (!any(portf$pair == 1) && !(any(portf$pair == 2))) stop('pair must contain both values 1 and 2')
      if (!any(names(portf$pair) == "MaxPos") || !any(names(portf$pair) == "lvls")) stop('pair must contain MaxPos and lvls')	
      
      if (portf$pair[symbol] == 1) legside <- "long"
      if (portf$pair[symbol] == 2) legside <- "short"	
      MaxPos <- portf$pair["MaxPos"]
      lvls <- portf$pair["lvls"]
      ratio <- getHedgeRatio(portfolio, timestamp)
      pos <- getPosQty(portfolio, symbol, timestamp) 	    
      PosLimit <- getPosLimit(portfolio, symbol, timestamp) 
      qty <- orderqty
      if (legside == "short") {#symbol is 2nd leg
            ## Comment out next line to use equal ordersizes for each stock. 
            addPosLimit(portfolio=portfolio, timestamp=timestamp, symbol=symbol, maxpos=round(MaxPos*ratio,0), longlevels=lvls, minpos=round(-MaxPos*ratio,0), shortlevels=lvls)
            ## 
            qty <- -orderqty #switch orderqty for Stock B
      }
      
      if (qty > 0) orderside = 'long'
      if (qty < 0) orderside = 'short'
      
      orderqty <- osMaxPos(data=data,timestamp=timestamp,orderqty=qty,ordertype=ordertype,
                           orderside=orderside,portfolio=portfolio,symbol=symbol,ruletype=ruletype, ...)
      
      #Add the order here instead of in the ruleSignal function
      if (!is.null(orderqty) & !orderqty == 0 & !is.null(orderprice)) {
            addOrder(portfolio = portfolio, symbol = symbol, 
                     timestamp = timestamp, qty = orderqty, price = as.numeric(orderprice), 
                     ordertype = ordertype, side = orderside, replace = FALSE,
                     status = "open", ... = ...)
      }
      return(0) #so that ruleSignal function doesn't also try to place an order
}

pairStrat <- add.rule(strategy = pairStrat, name='ruleSignal', arguments = list(sigcol="cross.dn", sigval=TRUE, orderqty=1e6, ordertype='market', orderside=NULL, osFUN='osSpreadMaxPos'), type='enter' ) 
pairStrat <- add.rule(strategy = pairStrat, name='ruleSignal', arguments = list(sigcol="cross.up", sigval=TRUE, orderqty=-1e6, ordertype='market', orderside=NULL, osFUN='osSpreadMaxPos'), type='enter')
pairStrat <- add.rule(strategy = pairStrat, name='ruleSignal', arguments = list(sigcol="cross.mid.fb", sigval=TRUE, orderqty='all', ordertype='market', orderside=NULL), type='exit') 
pairStrat <- add.rule(strategy = pairStrat, name='ruleSignal', arguments = list(sigcol="cross.mid.fa", sigval=TRUE, orderqty='all', ordertype='market', orderside=NULL), type='exit')

head(applySignals(strategy=pairStrat, mktdata=applyIndicators(strategy=pairStrat,mktdata=get(symb1))), 25)

out1<-applyStrategy(strategy=pairStrat, portfolios=portfolio.st)

updatePortf(Portfolio=portfolio.st,Dates=paste("::",as.Date(Sys.time()),sep=''))
updateAcct(account.st,Dates=paste(from,to,sep="::")) 
updateEndEq(account.st,Dates=paste(from,to,sep="::"))
getEndEq(account.st,Sys.time())

dev.new()
chart.Posn(Portfolio=portfolio.st,Symbol=symb1)
dev.new()
chart.Posn(Portfolio=portfolio.st,Symbol=symb2)
dev.new()
chartSeries(Cl(get(symb1))/Cl(get(symb2)),TA="addBBands(n=N,sd=SD)")


